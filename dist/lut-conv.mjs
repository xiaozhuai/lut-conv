function d(b,t,o){return Math.max(t,Math.min(o,b))}function p(b,t,o){return b+o*(t-b)}var E=class b{width;height;depth;data;constructor(t,o,r,n=null){if(this.width=t,this.height=o,this.depth=r,n===null)this.data=new Float32Array(t*o*r*3);else{if(n.length!==t*o*r*3)throw new Error("Invalid data length");this.data=n}}get(t,o,r){let n=(r*this.width*this.height+o*this.width+t)*3;return this.data.subarray(n,n+3)}set(t,o,r,n){let e=(r*this.width*this.height+o*this.width+t)*3;this.data[e]=n[0],this.data[e+1]=n[1],this.data[e+2]=n[2]}lookup(t,o,r,n){switch(n){case"nearest":return this.lookupNearest(t,o,r);case"linear":return this.lookupLinear(t,o,r);default:throw new Error("Invalid filter mode")}}lookupNearest(t,o,r){let n=t*this.width-.5,e=o*this.height-.5,i=r*this.depth-.5,s=d(Math.round(n),0,this.width-1),h=d(Math.round(e),0,this.width-1),l=d(Math.round(i),0,this.width-1);return this.get(s,h,l)}lookupLinear(t,o,r){let n=t*this.width-.5,e=o*this.height-.5,i=r*this.depth-.5,s=d(Math.floor(n),0,this.width-1),h=d(Math.floor(e),0,this.height-1),l=d(Math.floor(i),0,this.depth-1),a=d(s+1,0,this.width-1),u=d(h+1,0,this.height-1),c=d(l+1,0,this.depth-1),w=this.get(s,h,l),f=this.get(s,h,c),y=this.get(s,u,l),F=this.get(s,u,c),m=this.get(a,h,l),v=this.get(a,h,c),L=this.get(a,u,l),M=this.get(a,u,c),x=n-s,I=e-h,A=i-l;return new Float32Array(3).map((C,g)=>p(p(p(w[g],m[g],x),p(y[g],L[g],x),I),p(p(f[g],v[g],x),p(F[g],M[g],x),I),A))}resize(t,o,r,n){let e=new b(t,o,r);for(let i=0;i<r;i++)for(let s=0;s<o;s++)for(let h=0;h<t;h++){let l=(h+.5)/t,a=(s+.5)/o,u=(i+.5)/r;e.set(h,s,i,this.lookup(l,a,u,n))}return e}},z=class{static loadCubeStr(t){let o=/^LUT_3D_SIZE (\d+)$/m,r=/^([\d\\.Ee-]+) ([\d\\.Ee-]+) ([\d\\.Ee-]+)$/,n=o.exec(t);if(!n||n.length<2)throw new Error("Error parsing cube");let e=parseInt(n[1]),i=t.replace(/\r/g,"").split(`
`),s=0;for(;!r.test(i[s]);)s++;i.splice(0,s),i.splice(e*e*e);let h=new Float32Array(e*e*e*3);return i.forEach((l,a)=>{let u=l.split(" ").map(parseFloat);h[a*3]=u[0],h[a*3+1]=u[1],h[a*3+2]=u[2]}),new E(e,e,e,h)}static saveCubeStr(t,o=""){if(t.width!==t.height||t.width!==t.depth)throw new Error("Invalid lut size");let r=`${o.trim()}
LUT_3D_SIZE ${t.width}

`;for(let n=0;n<t.depth;n++)for(let e=0;e<t.height;e++)for(let i=0;i<t.width;i++){let s=t.get(i,e,n);r+=`${s[0].toFixed(6)} ${s[1].toFixed(6)} ${s[2].toFixed(6)}
`}return r}static loadLutImageData(t,o){let{imageWidth:r,imageHeight:n,width:e,height:i,depth:s}=o;if(r%e!==0||n%i!==0)throw new Error("Invalid image size");let h=r/e,l=new E(e,i,s);for(let a=0;a<s;a++)for(let u=0;u<i;u++)for(let c=0;c<e;c++){let w=a%h,f=Math.floor(a/h),y=c+w*e,m=((u+f*i)*r+y)*4;l.set(c,u,a,new Float32Array([t[m]/255,t[m+1]/255,t[m+2]/255]))}return l}static saveLutImageData(t,o){let{imageWidth:r,imageHeight:n,width:e,height:i,depth:s}=o;if(r%e!==0||n%i!==0)throw new Error("Invalid image size");if(t.width!==e||t.height!==i||t.depth!==s)throw new Error("Invalid lut size");let h=r/e,l=new Uint8ClampedArray(r*n*4);for(let a=0;a<s;a++)for(let u=0;u<i;u++)for(let c=0;c<e;c++){let w=a%h,f=Math.floor(a/h),y=c+w*e,m=((u+f*i)*r+y)*4,v=t.get(c,u,a);l[m]=d(Math.round(v[0]*255),0,255),l[m+1]=d(Math.round(v[1]*255),0,255),l[m+2]=d(Math.round(v[2]*255),0,255),l[m+3]=255}return l}};export{z as LutConv,E as LutData};
//# sourceMappingURL=lut-conv.mjs.map